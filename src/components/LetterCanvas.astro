<canvas id="letters-canvas" style="display:block; margin: auto; width: 100%; height: auto;"></canvas>

<script type="module">
  const letters = [
    { dir: '1-B', count: 9 },
    { dir: '2-O', count: 10 },
    { dir: '3-Y', count: 10 },
    { dir: '4-S', count: 10 },
    { dir: '5-G', count: 10 },
    { dir: '6-O', count: 10 },
    { dir: '7-T', count: 10 },
    { dir: '8-O', count: 8 },
    { dir: '9-J', count: 10 },
    { dir: '10-U', count: 10 },
    { dir: '11-P', count: 10 },
    { dir: '12-I', count: 10 },
    { dir: '13-T', count: 10 },
    { dir: '14-E', count: 9 },
    { dir: '15-R', count: 10 }
  ];

  function randomIndex(max) {
    return Math.floor(Math.random() * max);
  }

  const allImages = letters.map(({ dir, count }) =>
    Array.from({ length: count }, (_, i) => {
      const img = new window.Image();
      img.src = `/letters/${dir}/${i + 1}.png`;
      return img;
    })
  );

  Promise.all(
    allImages.flat().map(
      img =>
        new Promise(resolve => {
          if (img.complete) resolve();
          else img.onload = resolve;
        })
    )
  ).then(() => {
    const canvas = document.getElementById('letters-canvas');
    const ctx = canvas.getContext('2d');
    const numLetters = letters.length;
    const aspectRatio = allImages[0][0].naturalHeight / allImages[0][0].naturalWidth;

    // --- Dynamic behavior switching ---
    let cleanup = () => {};
    let timers = [];
    let lastHovered = { row: null, col: null };

    function isMobile() {
      return !window.matchMedia('(pointer: fine)').matches || window.innerWidth <= 768;
    }

    function clearTimers() {
      timers.forEach(rowTimers => rowTimers && rowTimers.forEach(id => clearTimeout(id)));
      timers = [];
    }

    function removeDesktopListeners() {
      canvas.removeEventListener('mousemove', handleMouseMove);
      canvas.removeEventListener('mouseleave', handleMouseLeave);
    }

    // We'll store currentVariants as a 2D array: [row][col]
    let currentVariants = [];

    function getLayout() {
      const parent = canvas.parentElement;
      const width = parent.offsetWidth;
      const height = window.innerHeight;
      const gapRatio = 0.12;
      const totalGap = (numLetters - 1) * gapRatio;
      const letterWidth = width / (numLetters + totalGap);
      const gap = letterWidth * gapRatio;
      const letterHeight = letterWidth * aspectRatio;
      const numRows = Math.floor(height / letterHeight);
      return { width, height, letterWidth, letterHeight, gap, numRows };
    }

    function draw() {
      const { width, height, letterWidth, letterHeight, gap, numRows } = getLayout();
      canvas.width = width;
      canvas.height = height;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let row = 0; row < numRows; row++) {
        for (let col = 0; col < numLetters; col++) {
          const img = allImages[col][currentVariants[row][col]];
          const x = col * (letterWidth + gap);
          const y = row * letterHeight;
          ctx.drawImage(img, x, y, letterWidth, letterHeight);
        }
      }
    }

    function handleMouseMove(e) {
      const { letterWidth, gap, letterHeight, numRows } = getLayout();
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      let hoveredCol = null;
      let hoveredRow = null;
      for (let col = 0; col < numLetters; col++) {
        const startX = col * (letterWidth + gap);
        const endX = startX + letterWidth;
        if (x >= startX && x < endX) {
          hoveredCol = col;
          break;
        }
      }
      for (let row = 0; row < numRows; row++) {
        const startY = row * letterHeight;
        const endY = startY + letterHeight;
        if (y >= startY && y < endY) {
          hoveredRow = row;
          break;
        }
      }
      if (
        hoveredRow !== null &&
        hoveredCol !== null &&
        (hoveredRow !== lastHovered.row || hoveredCol !== lastHovered.col)
      ) {
        currentVariants[hoveredRow][hoveredCol] =
          (currentVariants[hoveredRow][hoveredCol] + 1) % allImages[hoveredCol].length;
        draw();
      }
      lastHovered = { row: hoveredRow, col: hoveredCol };
    }

    function handleMouseLeave() {
      lastHovered = { row: null, col: null };
    }

    function setRandomTimerForLetter(row, col) {
      const minDelay = 1500;
      const maxDelay = 3500;
      const delay = Math.random() * (maxDelay - minDelay) + minDelay;
      const id = setTimeout(() => {
        let newVariant;
        do {
          newVariant = randomIndex(allImages[col].length);
        } while (newVariant === currentVariants[row][col] && allImages[col].length > 1);
        currentVariants[row][col] = newVariant;
        draw();
        setRandomTimerForLetter(row, col);
      }, delay);
      timers[row][col] = id;
    }

    function setupBehavior() {
      cleanup();
      clearTimers();
      removeDesktopListeners();
      lastHovered = { row: null, col: null };

      // Recompute layout and initialize currentVariants and timers
      const { numRows } = getLayout();
      currentVariants = Array.from({ length: numRows }, () =>
        letters.map((_, col) => randomIndex(allImages[col].length))
      );
      timers = Array.from({ length: numRows }, () => Array(numLetters).fill(null));

      if (!isMobile()) {
        canvas.addEventListener('mousemove', handleMouseMove);
        canvas.addEventListener('mouseleave', handleMouseLeave);
        cleanup = () => {
          canvas.removeEventListener('mousemove', handleMouseMove);
          canvas.removeEventListener('mouseleave', handleMouseLeave);
        };
      } else {
        for (let row = 0; row < numRows; row++) {
          for (let col = 0; col < numLetters; col++) {
            setRandomTimerForLetter(row, col);
          }
        }
        cleanup = clearTimers;
      }
    }

    // Use ResizeObserver for robust resize handling
    const resizeObserver = new window.ResizeObserver(() => {
      setupBehavior();
      draw();
    });
    resizeObserver.observe(canvas.parentElement);
    window.addEventListener('orientationchange', () => {
      setupBehavior();
      draw();
    });

    setupBehavior();
    draw();
  });
</script> 