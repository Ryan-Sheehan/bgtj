---
import LetterCanvas from '../components/LetterCanvas.astro';
import Layout from '../layouts/Layout.astro';
import FullBleedImage from '../components/FullBleedImage.astro';
import InsetImage from '../components/InsetImage.astro';
import familyUrl from '../assets/family.webp';
import { getClient, urlFor } from '../lib/sanityClient';
import { landingPageQuery } from '../lib/queries';
import type { LandingPage } from '../types/sanity.types';
import type { InsetImageBlock } from '../types/custom-sanity';

// Fetch landing page data
const client = getClient();
const landingPageData: LandingPage | null = await client.fetch(landingPageQuery);

// Use default components if no CMS data is available
const defaultComponents: NonNullable<LandingPage['components']> = [
  { _type: 'letterCanvas', enabled: true, _key: 'default-letter-canvas' },
  { 
    _type: 'fullBleedImage', 
    alt: 'Family',
    _key: 'default-full-bleed'
  }
];

const components = landingPageData?.components || defaultComponents;
---

<Layout {...(landingPageData?.meta ? { meta: landingPageData.meta } : {})}>
	  {components.map((component) => {
    if (component._type === 'letterCanvas') {
      // Only render if enabled (default true)
      if (component.enabled !== false) {
        return <LetterCanvas />;
      }
      return null;
    }
    
    if (component._type === 'fullBleedImage') {
      // Safely check for valid image asset
      const hasValidImage = component.image?.asset?._ref && 
                           component.image.asset._ref.length > 0;
      
      const imageSrc = hasValidImage
        ? urlFor(component.image).width(1920).height(1080).fit('crop').url()
        : familyUrl.src;
      
      return (
        <FullBleedImage 
          src={imageSrc} 
          alt={component.alt || 'Family'} 
        />
      );
    }
    
    if ((component as any)._type === 'insetImage') {
      const comp = component as unknown as InsetImageBlock;
      const hasValidImage = comp.image?.asset?._ref && 
                           comp.image.asset._ref.length > 0;

      const imageSrc = hasValidImage
        ? urlFor(comp.image).width(1200).fit('max').url()
        : familyUrl.src;

      return <InsetImage src={imageSrc} alt={comp.alt || 'Image'} />;
    }
    
    return null;
  })}
</Layout>
